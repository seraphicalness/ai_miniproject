# -*- coding: utf-8 -*-
"""mini_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xLy63kzow063xi118t6PoyhLu09vT8gK
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

# 데이터 불러오기
df = pd.read_csv('/content/energydata_complete.csv')

# 필요 없는 컬럼 제거
df = df.drop(['date', 'rv1', 'rv2'], axis=1)

# 결측치 처리
df = df.fillna(df.mean())


# 입력(X)과 출력(y) 분리
X = df.drop(['Appliances'], axis=1)
y = df['Appliances']

# 입력 데이터 정규화
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# 훈련/테스트 셋 분리
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# 모델 구성

# 테스트 1) 층과 노드 증가, 배치 사이즈 증가
# model = Sequential()
# model.add(Dense(128, activation='relu', input_shape=(X_train.shape[1],)))
# model.add(Dense(64, activation='relu'))
# model.add(Dense(32, activation='relu'))
# model.add(Dense(1))
# model.compile(optimizer='adam', loss='mse', metrics=['mse'])

# 테스트 2) 활성화 함수 tanh, 손실 함수 mae 사용
model = Sequential()
model.add(Dense(128, activation='tanh', input_shape=(X_train.shape[1],)))
model.add(Dense(64, activation='tanh'))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mae', metrics=['mae'])

# 테스트 3) 층/노드 대폭 증가, learning late 지정
# from tensorflow.keras.optimizers import Adam
# optimizer = Adam(learning_rate=0.001)

# model = Sequential()
# model.add(Dense(256, activation='relu', input_shape=(X_train.shape[1],)))
# model.add(Dense(128, activation='relu'))
# model.add(Dense(64, activation='relu'))
# model.add(Dense(1))
# model.compile(optimizer=optimizer, loss='mse', metrics=['mae'])


# 콜백 정의
early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)
checkpoint = ModelCheckpoint('best_energy_model.keras', monitor='val_loss', save_best_only=True, verbose=1)

# 모델 학습
history = model.fit(X_train, y_train,
                    validation_split=0.2,
                    epochs=100,
                    batch_size=32, # test 3 -> 128
                    callbacks=[early_stop, checkpoint],
                    verbose=1)

#  테스트셋 성능 확인
test_loss, test_mse = model.evaluate(X_test, y_test)
print("\n model performance (mse):", test_mse)